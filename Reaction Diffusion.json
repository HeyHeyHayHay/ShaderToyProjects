{
 "ver": "0.1",
 "info": {
  "id": "M3tGR8",
  "date": "1716098616",
  "viewed": 4,
  "name": "Reaction Diffusion Presets",
  "description": "Reaction Diffusion PDE\nCreates organic looking structures from simple rules.\nClick to add chemical B Blue",
  "likes": 0,
  "published": "Public",
  "usePreview": 0,
  "tags": [
   "simulation",
   "organic",
   "reactiondiffusion"
  ],
  "hasliked": 0,
  "parentid": "",
  "parentname": ""
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "\n// RENDER IN FANCY COLORS\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec4 heatColor( in vec4 redFragColor ) {\n    vec4 heatColor;\n    \n    // blue red palette\n    vec3 a = vec3(0.650, 0.500, 0.310);\n    vec3 b = vec3(-0.650, 0.500, 0.600);\n    vec3 c = vec3(0.333, 0.278, 0.278);\n    vec3 d = vec3(0.660, 0.000, 0.667);\n    \n    float redHeat = redFragColor.r;\n    \n    vec3 color = palette(redHeat, a, b, c, d);\n    \n    heatColor = vec4(color, 1.0);\n    \n    return heatColor;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // get frame data from buffer A\n    \n    vec4 frameData = texture(iChannel0, uv);\n    \n    vec4 redFragColor = vec4(frameData.rgb, 1.0);\n    \n    fragColor = heatColor(redFragColor);\n    \n    //fragColor = vec4(frameData.rgb, 1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "\n// Red is Chemical A\n// Blue is Chemical B\n\n// CONFIGURABLES\n\n//#define CoralGrowth\n//#define Mitosis\n#define Waves\n//#define Holes\n//#define Giraffe\n\n// Constants\n// This can affect the stability of the simulation\n\n\nfloat calculationsPerFrame = 400.0;\n\n\nfloat ADiffusionFactor = 1.0;\nfloat BDiffusionFactor = 0.50;\n\n#ifdef CoralGrowth\n    float feed = 0.061;\n    float kill = 0.0626;\n#endif\n#ifdef Mitosis\n    float feed = 0.0285;\n    float kill = 0.0614;\n#endif\n#ifdef Waves\n    float feed = 0.0178;\n    float kill = 0.0466;\n#endif\n#ifdef Holes\n    float feed = 0.0597;\n    float kill = 0.0611;\n#endif\n#ifdef Giraffe\n    float feed = 0.104;\n    float kill = 0.0538;\n#endif\n\n// Initial Condition\n\nvec4 initialize(in vec2 uvCoord) {\n    // aspect ratio\n    uvCoord.x *= iResolution.x / iResolution.y;\n\n    vec4 fragColor;\n    \n    fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n\n    return fragColor;\n}\n\n// Laplacian Convolution\nvec3 convolute(in mat3 filterKernel, in float divisionScalar , in vec2 uvCoord){\n        \n    // Offset for the neighboring pixels\n    float Xoffset = 1.0 / iResolution.x;\n    float Yoffset = 1.0 / iResolution.y;\n    \n    vec3 colorSum = vec3(0.0);\n    \n    // Loop over the kernel\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 offsetCoord = uvCoord + vec2(float(i) * Xoffset, float(j) * Yoffset);\n            vec3 pixelColorAtCoord = texture(iChannel0, offsetCoord).rgb;\n            float scalar = float(filterKernel[i+1][j+1]);\n            \n            vec3 addend = pixelColorAtCoord*scalar;\n            colorSum += addend;\n            \n        }\n    }\n\n    // Average the sum\n    vec3 color = colorSum / divisionScalar;\n    \n    return color;\n\n}\n\n// Laplacian Kernel\n\nmat3 laplacian = mat3(\n    0.05, 0.2, 0.05,\n    0.2, -1.0, 0.2,\n    0.05, 0.2, 0.05\n);\n\nfloat divisionFactor = 1.0;\n\n\n// Chemical Reaction PDEs\nvec3 chemicalReaction(in vec3 color, in vec2 uvCoord){\n    \n    // Find A and B Concentrations\n    float A = color.r;\n    float B = color.b;\n    \n    // find laplacian\n    vec3 laplacian = convolute(laplacian, divisionFactor, uvCoord);\n    float laplacianA = laplacian.r;\n    float laplacianB = laplacian.b;\n\n    float diegeticDeltaT = float( 1.0 / calculationsPerFrame );\n\n    // find change\n    float changeA = (ADiffusionFactor*laplacianA - A*B*B + feed*(1.0-A) )*diegeticDeltaT;\n    float changeB = (BDiffusionFactor*laplacianB + A*B*B - (kill + feed)*B )*diegeticDeltaT;\n\n    float newA = A + changeA;\n    float newB = B + changeB;\n    \n    // Calculate new color\n    color = vec3(newA, 0.0, newB);\n    \n    return color;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color;\n    \n    // get previousData\n    vec4 previousFrameData = texture(iChannel0,uv);\n    \n    \n    // Initial Condition\n    if(iFrame == 0) {\n        \n        fragColor = initialize(uv);\n        return;\n    }\n    \n    // Find color of next frame\n    \n    color = previousFrameData.rgb;\n    \n    for ( int i = 0; float(i) < calculationsPerFrame; i++ ){\n        color = chemicalReaction(color, uv);\n    }\n    \n    // Add Chemical B at mouse hold\n\n    float mouseDistance = pow(iMouse.x - fragCoord.x, 2.0) + pow(iMouse.y - fragCoord.y, 2.0);\n\n    if( mouseDistance < 14.0 ) {\n        color = vec3(0.0, 0.0, 1.0);\n    }\n\n   \n    fragColor = vec4(color, 1.0);\n\n}\n\n",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  }
 ]
}